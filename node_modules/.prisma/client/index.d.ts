
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type categoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "category"
  objects: {
    detail_items: detail_itemsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    category: string
  }, ExtArgs["result"]["category"]>
  composites: {}
}

/**
 * Model category
 * 
 */
export type category = runtime.Types.DefaultSelection<categoryPayload>
export type historyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "history"
  objects: {
    items: itemsPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    itemsId: number
    reason: string
    createdAt: Date
  }, ExtArgs["result"]["history"]>
  composites: {}
}

/**
 * Model history
 * 
 */
export type history = runtime.Types.DefaultSelection<historyPayload>
export type detail_itemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "detail_items"
  objects: {
    items: itemsPayload<ExtArgs>[]
    category: categoryPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    categoryId: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date
  }, ExtArgs["result"]["detail_items"]>
  composites: {}
}

/**
 * Model detail_items
 * 
 */
export type detail_items = runtime.Types.DefaultSelection<detail_itemsPayload>
export type itemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "items"
  objects: {
    history: historyPayload<ExtArgs>[]
    detailItems: detail_itemsPayload<ExtArgs>
    user: userPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    detailId: number
    userId: number
    status: items_status
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["items"]>
  composites: {}
}

/**
 * Model items
 * 
 */
export type items = runtime.Types.DefaultSelection<itemsPayload>
export type userPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "user"
  objects: {
    items: itemsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role: user_role
    is_active: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model user
 * 
 */
export type user = runtime.Types.DefaultSelection<userPayload>
export type accesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "acces"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    userId: number
    name: string
    token: string
  }, ExtArgs["result"]["acces"]>
  composites: {}
}

/**
 * Model acces
 * 
 */
export type acces = runtime.Types.DefaultSelection<accesPayload>

/**
 * Enums
 */

export const items_status: {
  onprocess: 'onprocess',
  approve: 'approve',
  reject: 'reject'
};

export type items_status = (typeof items_status)[keyof typeof items_status]


export const user_role: {
  admin: 'admin',
  member: 'member'
};

export type user_role = (typeof user_role)[keyof typeof user_role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.historyDelegate<ExtArgs>;

  /**
   * `prisma.detail_items`: Exposes CRUD operations for the **detail_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Detail_items
    * const detail_items = await prisma.detail_items.findMany()
    * ```
    */
  get detail_items(): Prisma.detail_itemsDelegate<ExtArgs>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.itemsDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.acces`: Exposes CRUD operations for the **acces** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Acces
    * const acces = await prisma.acces.findMany()
    * ```
    */
  get acces(): Prisma.accesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    category: 'category',
    history: 'history',
    detail_items: 'detail_items',
    items: 'items',
    user: 'user',
    acces: 'acces'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'category' | 'history' | 'detail_items' | 'items' | 'user' | 'acces'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      category: {
        payload: categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      history: {
        payload: historyPayload<ExtArgs>
        fields: Prisma.historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.historyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.historyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          findFirst: {
            args: Prisma.historyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.historyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          findMany: {
            args: Prisma.historyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>[]
          }
          create: {
            args: Prisma.historyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          createMany: {
            args: Prisma.historyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.historyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          update: {
            args: Prisma.historyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          deleteMany: {
            args: Prisma.historyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.historyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.historyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<historyPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.historyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.historyCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
      detail_items: {
        payload: detail_itemsPayload<ExtArgs>
        fields: Prisma.detail_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.detail_itemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.detail_itemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          findFirst: {
            args: Prisma.detail_itemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.detail_itemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          findMany: {
            args: Prisma.detail_itemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>[]
          }
          create: {
            args: Prisma.detail_itemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          createMany: {
            args: Prisma.detail_itemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.detail_itemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          update: {
            args: Prisma.detail_itemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          deleteMany: {
            args: Prisma.detail_itemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.detail_itemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.detail_itemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<detail_itemsPayload>
          }
          aggregate: {
            args: Prisma.Detail_itemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDetail_items>
          }
          groupBy: {
            args: Prisma.detail_itemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Detail_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.detail_itemsCountArgs<ExtArgs>,
            result: $Utils.Optional<Detail_itemsCountAggregateOutputType> | number
          }
        }
      }
      items: {
        payload: itemsPayload<ExtArgs>
        fields: Prisma.itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.itemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.itemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          findFirst: {
            args: Prisma.itemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.itemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          findMany: {
            args: Prisma.itemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>[]
          }
          create: {
            args: Prisma.itemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          createMany: {
            args: Prisma.itemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.itemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          update: {
            args: Prisma.itemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          deleteMany: {
            args: Prisma.itemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.itemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.itemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<itemsPayload>
          }
          aggregate: {
            args: Prisma.ItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItems>
          }
          groupBy: {
            args: Prisma.itemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.itemsCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemsCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      acces: {
        payload: accesPayload<ExtArgs>
        fields: Prisma.accesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.accesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.accesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          findFirst: {
            args: Prisma.accesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.accesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          findMany: {
            args: Prisma.accesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>[]
          }
          create: {
            args: Prisma.accesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          createMany: {
            args: Prisma.accesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.accesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          update: {
            args: Prisma.accesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          deleteMany: {
            args: Prisma.accesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.accesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.accesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accesPayload>
          }
          aggregate: {
            args: Prisma.AccesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAcces>
          }
          groupBy: {
            args: Prisma.accesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccesGroupByOutputType>[]
          }
          count: {
            args: Prisma.accesCountArgs<ExtArgs>,
            result: $Utils.Optional<AccesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    detail_items: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    detail_items?: boolean | CategoryCountOutputTypeCountDetail_itemsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountDetail_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: detail_itemsWhereInput
  }



  /**
   * Count Type Detail_itemsCountOutputType
   */


  export type Detail_itemsCountOutputType = {
    items: number
  }

  export type Detail_itemsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    items?: boolean | Detail_itemsCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes

  /**
   * Detail_itemsCountOutputType without action
   */
  export type Detail_itemsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail_itemsCountOutputType
     */
    select?: Detail_itemsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Detail_itemsCountOutputType without action
   */
  export type Detail_itemsCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: itemsWhereInput
  }



  /**
   * Count Type ItemsCountOutputType
   */


  export type ItemsCountOutputType = {
    history: number
  }

  export type ItemsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    history?: boolean | ItemsCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCountOutputType
     */
    select?: ItemsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: historyWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    items: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    items?: boolean | UserCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: itemsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    category: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    category: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    category: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    category?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    category?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    category?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    category: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    detail_items?: boolean | category$detail_itemsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    id?: boolean
    category?: boolean
  }

  export type categoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    detail_items?: boolean | category$detail_itemsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }


  type categoryGetPayload<S extends boolean | null | undefined | categoryArgs> = $Types.GetResult<categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryCreateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    detail_items<T extends category$detail_itemsArgs<ExtArgs> = {}>(args?: Subset<T, category$detail_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'Int'>
    readonly category: FieldRef<"category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }


  /**
   * category.detail_items
   */
  export type category$detail_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    where?: detail_itemsWhereInput
    orderBy?: detail_itemsOrderByWithRelationInput | detail_itemsOrderByWithRelationInput[]
    cursor?: detail_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Detail_itemsScalarFieldEnum | Detail_itemsScalarFieldEnum[]
  }


  /**
   * category without action
   */
  export type categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
  }



  /**
   * Model history
   */


  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id: number | null
    itemsId: number | null
  }

  export type HistorySumAggregateOutputType = {
    id: number | null
    itemsId: number | null
  }

  export type HistoryMinAggregateOutputType = {
    id: number | null
    itemsId: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type HistoryMaxAggregateOutputType = {
    id: number | null
    itemsId: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type HistoryCountAggregateOutputType = {
    id: number
    itemsId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id?: true
    itemsId?: true
  }

  export type HistorySumAggregateInputType = {
    id?: true
    itemsId?: true
  }

  export type HistoryMinAggregateInputType = {
    id?: true
    itemsId?: true
    reason?: true
    createdAt?: true
  }

  export type HistoryMaxAggregateInputType = {
    id?: true
    itemsId?: true
    reason?: true
    createdAt?: true
  }

  export type HistoryCountAggregateInputType = {
    id?: true
    itemsId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which history to aggregate.
     */
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     */
    orderBy?: historyOrderByWithRelationInput | historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type historyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: historyWhereInput
    orderBy?: historyOrderByWithAggregationInput | historyOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }


  export type HistoryGroupByOutputType = {
    id: number
    itemsId: number
    reason: string
    createdAt: Date
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type historySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemsId?: boolean
    reason?: boolean
    createdAt?: boolean
    items?: boolean | itemsArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type historySelectScalar = {
    id?: boolean
    itemsId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type historyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    items?: boolean | itemsArgs<ExtArgs>
  }


  type historyGetPayload<S extends boolean | null | undefined | historyArgs> = $Types.GetResult<historyPayload, S>

  type historyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<historyFindManyArgs, 'select' | 'include'> & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface historyDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['history'], meta: { name: 'history' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {historyFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends historyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, historyFindUniqueArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one History that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {historyFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends historyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, historyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends historyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, historyFindFirstArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends historyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, historyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historyWithIdOnly = await prisma.history.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends historyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<historyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a History.
     * @param {historyCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends historyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, historyCreateArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Histories.
     *     @param {historyCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends historyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {historyDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends historyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, historyDeleteArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one History.
     * @param {historyUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends historyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, historyUpdateArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Histories.
     * @param {historyDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends historyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends historyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, historyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {historyUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends historyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, historyUpsertArgs<ExtArgs>>
    ): Prisma__historyClient<$Types.GetResult<historyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends historyCountArgs>(
      args?: Subset<T, historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: historyGroupByArgs['orderBy'] }
        : { orderBy?: historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the history model
   */
  readonly fields: historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__historyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    items<T extends itemsArgs<ExtArgs> = {}>(args?: Subset<T, itemsArgs<ExtArgs>>): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the history model
   */ 
  interface historyFieldRefs {
    readonly id: FieldRef<"history", 'Int'>
    readonly itemsId: FieldRef<"history", 'Int'>
    readonly reason: FieldRef<"history", 'String'>
    readonly createdAt: FieldRef<"history", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * history findUnique
   */
  export type historyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter, which history to fetch.
     */
    where: historyWhereUniqueInput
  }


  /**
   * history findUniqueOrThrow
   */
  export type historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter, which history to fetch.
     */
    where: historyWhereUniqueInput
  }


  /**
   * history findFirst
   */
  export type historyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter, which history to fetch.
     */
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     */
    orderBy?: historyOrderByWithRelationInput | historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for histories.
     */
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * history findFirstOrThrow
   */
  export type historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter, which history to fetch.
     */
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     */
    orderBy?: historyOrderByWithRelationInput | historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for histories.
     */
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * history findMany
   */
  export type historyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter, which histories to fetch.
     */
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     */
    orderBy?: historyOrderByWithRelationInput | historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing histories.
     */
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * history create
   */
  export type historyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * The data needed to create a history.
     */
    data: XOR<historyCreateInput, historyUncheckedCreateInput>
  }


  /**
   * history createMany
   */
  export type historyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many histories.
     */
    data: historyCreateManyInput | historyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * history update
   */
  export type historyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * The data needed to update a history.
     */
    data: XOR<historyUpdateInput, historyUncheckedUpdateInput>
    /**
     * Choose, which history to update.
     */
    where: historyWhereUniqueInput
  }


  /**
   * history updateMany
   */
  export type historyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update histories.
     */
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyInput>
    /**
     * Filter which histories to update
     */
    where?: historyWhereInput
  }


  /**
   * history upsert
   */
  export type historyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * The filter to search for the history to update in case it exists.
     */
    where: historyWhereUniqueInput
    /**
     * In case the history found by the `where` argument doesn't exist, create a new history with this data.
     */
    create: XOR<historyCreateInput, historyUncheckedCreateInput>
    /**
     * In case the history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<historyUpdateInput, historyUncheckedUpdateInput>
  }


  /**
   * history delete
   */
  export type historyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    /**
     * Filter which history to delete.
     */
    where: historyWhereUniqueInput
  }


  /**
   * history deleteMany
   */
  export type historyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which histories to delete
     */
    where?: historyWhereInput
  }


  /**
   * history without action
   */
  export type historyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
  }



  /**
   * Model detail_items
   */


  export type AggregateDetail_items = {
    _count: Detail_itemsCountAggregateOutputType | null
    _avg: Detail_itemsAvgAggregateOutputType | null
    _sum: Detail_itemsSumAggregateOutputType | null
    _min: Detail_itemsMinAggregateOutputType | null
    _max: Detail_itemsMaxAggregateOutputType | null
  }

  export type Detail_itemsAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    quantity: number | null
    price: number | null
    total: number | null
  }

  export type Detail_itemsSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    quantity: number | null
    price: number | null
    total: number | null
  }

  export type Detail_itemsMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    quantity: number | null
    description: string | null
    url: string | null
    price: number | null
    total: number | null
    duedate: Date | null
  }

  export type Detail_itemsMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    quantity: number | null
    description: string | null
    url: string | null
    price: number | null
    total: number | null
    duedate: Date | null
  }

  export type Detail_itemsCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    quantity: number
    description: number
    url: number
    price: number
    total: number
    duedate: number
    _all: number
  }


  export type Detail_itemsAvgAggregateInputType = {
    id?: true
    categoryId?: true
    quantity?: true
    price?: true
    total?: true
  }

  export type Detail_itemsSumAggregateInputType = {
    id?: true
    categoryId?: true
    quantity?: true
    price?: true
    total?: true
  }

  export type Detail_itemsMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    quantity?: true
    description?: true
    url?: true
    price?: true
    total?: true
    duedate?: true
  }

  export type Detail_itemsMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    quantity?: true
    description?: true
    url?: true
    price?: true
    total?: true
    duedate?: true
  }

  export type Detail_itemsCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    quantity?: true
    description?: true
    url?: true
    price?: true
    total?: true
    duedate?: true
    _all?: true
  }

  export type Detail_itemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which detail_items to aggregate.
     */
    where?: detail_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of detail_items to fetch.
     */
    orderBy?: detail_itemsOrderByWithRelationInput | detail_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: detail_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` detail_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` detail_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned detail_items
    **/
    _count?: true | Detail_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Detail_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Detail_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Detail_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Detail_itemsMaxAggregateInputType
  }

  export type GetDetail_itemsAggregateType<T extends Detail_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateDetail_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetail_items[P]>
      : GetScalarType<T[P], AggregateDetail_items[P]>
  }




  export type detail_itemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: detail_itemsWhereInput
    orderBy?: detail_itemsOrderByWithAggregationInput | detail_itemsOrderByWithAggregationInput[]
    by: Detail_itemsScalarFieldEnum[] | Detail_itemsScalarFieldEnum
    having?: detail_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Detail_itemsCountAggregateInputType | true
    _avg?: Detail_itemsAvgAggregateInputType
    _sum?: Detail_itemsSumAggregateInputType
    _min?: Detail_itemsMinAggregateInputType
    _max?: Detail_itemsMaxAggregateInputType
  }


  export type Detail_itemsGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date
    _count: Detail_itemsCountAggregateOutputType | null
    _avg: Detail_itemsAvgAggregateOutputType | null
    _sum: Detail_itemsSumAggregateOutputType | null
    _min: Detail_itemsMinAggregateOutputType | null
    _max: Detail_itemsMaxAggregateOutputType | null
  }

  type GetDetail_itemsGroupByPayload<T extends detail_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Detail_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Detail_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Detail_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Detail_itemsGroupByOutputType[P]>
        }
      >
    >


  export type detail_itemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    quantity?: boolean
    description?: boolean
    url?: boolean
    price?: boolean
    total?: boolean
    duedate?: boolean
    items?: boolean | detail_items$itemsArgs<ExtArgs>
    category?: boolean | categoryArgs<ExtArgs>
    _count?: boolean | Detail_itemsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["detail_items"]>

  export type detail_itemsSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    quantity?: boolean
    description?: boolean
    url?: boolean
    price?: boolean
    total?: boolean
    duedate?: boolean
  }

  export type detail_itemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    items?: boolean | detail_items$itemsArgs<ExtArgs>
    category?: boolean | categoryArgs<ExtArgs>
    _count?: boolean | Detail_itemsCountOutputTypeArgs<ExtArgs>
  }


  type detail_itemsGetPayload<S extends boolean | null | undefined | detail_itemsArgs> = $Types.GetResult<detail_itemsPayload, S>

  type detail_itemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<detail_itemsFindManyArgs, 'select' | 'include'> & {
      select?: Detail_itemsCountAggregateInputType | true
    }

  export interface detail_itemsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['detail_items'], meta: { name: 'detail_items' } }
    /**
     * Find zero or one Detail_items that matches the filter.
     * @param {detail_itemsFindUniqueArgs} args - Arguments to find a Detail_items
     * @example
     * // Get one Detail_items
     * const detail_items = await prisma.detail_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends detail_itemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsFindUniqueArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Detail_items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {detail_itemsFindUniqueOrThrowArgs} args - Arguments to find a Detail_items
     * @example
     * // Get one Detail_items
     * const detail_items = await prisma.detail_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends detail_itemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Detail_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsFindFirstArgs} args - Arguments to find a Detail_items
     * @example
     * // Get one Detail_items
     * const detail_items = await prisma.detail_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends detail_itemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsFindFirstArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Detail_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsFindFirstOrThrowArgs} args - Arguments to find a Detail_items
     * @example
     * // Get one Detail_items
     * const detail_items = await prisma.detail_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends detail_itemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Detail_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Detail_items
     * const detail_items = await prisma.detail_items.findMany()
     * 
     * // Get first 10 Detail_items
     * const detail_items = await prisma.detail_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detail_itemsWithIdOnly = await prisma.detail_items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends detail_itemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Detail_items.
     * @param {detail_itemsCreateArgs} args - Arguments to create a Detail_items.
     * @example
     * // Create one Detail_items
     * const Detail_items = await prisma.detail_items.create({
     *   data: {
     *     // ... data to create a Detail_items
     *   }
     * })
     * 
    **/
    create<T extends detail_itemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsCreateArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Detail_items.
     *     @param {detail_itemsCreateManyArgs} args - Arguments to create many Detail_items.
     *     @example
     *     // Create many Detail_items
     *     const detail_items = await prisma.detail_items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends detail_itemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Detail_items.
     * @param {detail_itemsDeleteArgs} args - Arguments to delete one Detail_items.
     * @example
     * // Delete one Detail_items
     * const Detail_items = await prisma.detail_items.delete({
     *   where: {
     *     // ... filter to delete one Detail_items
     *   }
     * })
     * 
    **/
    delete<T extends detail_itemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsDeleteArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Detail_items.
     * @param {detail_itemsUpdateArgs} args - Arguments to update one Detail_items.
     * @example
     * // Update one Detail_items
     * const detail_items = await prisma.detail_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends detail_itemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsUpdateArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Detail_items.
     * @param {detail_itemsDeleteManyArgs} args - Arguments to filter Detail_items to delete.
     * @example
     * // Delete a few Detail_items
     * const { count } = await prisma.detail_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends detail_itemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, detail_itemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Detail_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Detail_items
     * const detail_items = await prisma.detail_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends detail_itemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Detail_items.
     * @param {detail_itemsUpsertArgs} args - Arguments to update or create a Detail_items.
     * @example
     * // Update or create a Detail_items
     * const detail_items = await prisma.detail_items.upsert({
     *   create: {
     *     // ... data to create a Detail_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Detail_items we want to update
     *   }
     * })
    **/
    upsert<T extends detail_itemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, detail_itemsUpsertArgs<ExtArgs>>
    ): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Detail_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsCountArgs} args - Arguments to filter Detail_items to count.
     * @example
     * // Count the number of Detail_items
     * const count = await prisma.detail_items.count({
     *   where: {
     *     // ... the filter for the Detail_items we want to count
     *   }
     * })
    **/
    count<T extends detail_itemsCountArgs>(
      args?: Subset<T, detail_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Detail_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Detail_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Detail_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Detail_itemsAggregateArgs>(args: Subset<T, Detail_itemsAggregateArgs>): Prisma.PrismaPromise<GetDetail_itemsAggregateType<T>>

    /**
     * Group by Detail_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {detail_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends detail_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: detail_itemsGroupByArgs['orderBy'] }
        : { orderBy?: detail_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, detail_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetail_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the detail_items model
   */
  readonly fields: detail_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for detail_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__detail_itemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    items<T extends detail_items$itemsArgs<ExtArgs> = {}>(args?: Subset<T, detail_items$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findMany'>| Null>;

    category<T extends categoryArgs<ExtArgs> = {}>(args?: Subset<T, categoryArgs<ExtArgs>>): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the detail_items model
   */ 
  interface detail_itemsFieldRefs {
    readonly id: FieldRef<"detail_items", 'Int'>
    readonly categoryId: FieldRef<"detail_items", 'Int'>
    readonly name: FieldRef<"detail_items", 'String'>
    readonly quantity: FieldRef<"detail_items", 'Int'>
    readonly description: FieldRef<"detail_items", 'String'>
    readonly url: FieldRef<"detail_items", 'String'>
    readonly price: FieldRef<"detail_items", 'Float'>
    readonly total: FieldRef<"detail_items", 'Float'>
    readonly duedate: FieldRef<"detail_items", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * detail_items findUnique
   */
  export type detail_itemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter, which detail_items to fetch.
     */
    where: detail_itemsWhereUniqueInput
  }


  /**
   * detail_items findUniqueOrThrow
   */
  export type detail_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter, which detail_items to fetch.
     */
    where: detail_itemsWhereUniqueInput
  }


  /**
   * detail_items findFirst
   */
  export type detail_itemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter, which detail_items to fetch.
     */
    where?: detail_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of detail_items to fetch.
     */
    orderBy?: detail_itemsOrderByWithRelationInput | detail_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for detail_items.
     */
    cursor?: detail_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` detail_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` detail_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of detail_items.
     */
    distinct?: Detail_itemsScalarFieldEnum | Detail_itemsScalarFieldEnum[]
  }


  /**
   * detail_items findFirstOrThrow
   */
  export type detail_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter, which detail_items to fetch.
     */
    where?: detail_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of detail_items to fetch.
     */
    orderBy?: detail_itemsOrderByWithRelationInput | detail_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for detail_items.
     */
    cursor?: detail_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` detail_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` detail_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of detail_items.
     */
    distinct?: Detail_itemsScalarFieldEnum | Detail_itemsScalarFieldEnum[]
  }


  /**
   * detail_items findMany
   */
  export type detail_itemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter, which detail_items to fetch.
     */
    where?: detail_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of detail_items to fetch.
     */
    orderBy?: detail_itemsOrderByWithRelationInput | detail_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing detail_items.
     */
    cursor?: detail_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` detail_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` detail_items.
     */
    skip?: number
    distinct?: Detail_itemsScalarFieldEnum | Detail_itemsScalarFieldEnum[]
  }


  /**
   * detail_items create
   */
  export type detail_itemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a detail_items.
     */
    data: XOR<detail_itemsCreateInput, detail_itemsUncheckedCreateInput>
  }


  /**
   * detail_items createMany
   */
  export type detail_itemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many detail_items.
     */
    data: detail_itemsCreateManyInput | detail_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * detail_items update
   */
  export type detail_itemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a detail_items.
     */
    data: XOR<detail_itemsUpdateInput, detail_itemsUncheckedUpdateInput>
    /**
     * Choose, which detail_items to update.
     */
    where: detail_itemsWhereUniqueInput
  }


  /**
   * detail_items updateMany
   */
  export type detail_itemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update detail_items.
     */
    data: XOR<detail_itemsUpdateManyMutationInput, detail_itemsUncheckedUpdateManyInput>
    /**
     * Filter which detail_items to update
     */
    where?: detail_itemsWhereInput
  }


  /**
   * detail_items upsert
   */
  export type detail_itemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the detail_items to update in case it exists.
     */
    where: detail_itemsWhereUniqueInput
    /**
     * In case the detail_items found by the `where` argument doesn't exist, create a new detail_items with this data.
     */
    create: XOR<detail_itemsCreateInput, detail_itemsUncheckedCreateInput>
    /**
     * In case the detail_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<detail_itemsUpdateInput, detail_itemsUncheckedUpdateInput>
  }


  /**
   * detail_items delete
   */
  export type detail_itemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
    /**
     * Filter which detail_items to delete.
     */
    where: detail_itemsWhereUniqueInput
  }


  /**
   * detail_items deleteMany
   */
  export type detail_itemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which detail_items to delete
     */
    where?: detail_itemsWhereInput
  }


  /**
   * detail_items.items
   */
  export type detail_items$itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    where?: itemsWhereInput
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    cursor?: itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * detail_items without action
   */
  export type detail_itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detail_items
     */
    select?: detail_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: detail_itemsInclude<ExtArgs> | null
  }



  /**
   * Model items
   */


  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id: number | null
    detailId: number | null
    userId: number | null
  }

  export type ItemsSumAggregateOutputType = {
    id: number | null
    detailId: number | null
    userId: number | null
  }

  export type ItemsMinAggregateOutputType = {
    id: number | null
    detailId: number | null
    userId: number | null
    status: items_status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: number | null
    detailId: number | null
    userId: number | null
    status: items_status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    detailId: number
    userId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id?: true
    detailId?: true
    userId?: true
  }

  export type ItemsSumAggregateInputType = {
    id?: true
    detailId?: true
    userId?: true
  }

  export type ItemsMinAggregateInputType = {
    id?: true
    detailId?: true
    userId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    detailId?: true
    userId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    detailId?: true
    userId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which items to aggregate.
     */
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type itemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: itemsWhereInput
    orderBy?: itemsOrderByWithAggregationInput | itemsOrderByWithAggregationInput[]
    by: ItemsScalarFieldEnum[] | ItemsScalarFieldEnum
    having?: itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }


  export type ItemsGroupByOutputType = {
    id: number
    detailId: number
    userId: number
    status: items_status
    createdAt: Date
    updatedAt: Date
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type itemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    detailId?: boolean
    userId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    history?: boolean | items$historyArgs<ExtArgs>
    detailItems?: boolean | detail_itemsArgs<ExtArgs>
    user?: boolean | userArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type itemsSelectScalar = {
    id?: boolean
    detailId?: boolean
    userId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type itemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    history?: boolean | items$historyArgs<ExtArgs>
    detailItems?: boolean | detail_itemsArgs<ExtArgs>
    user?: boolean | userArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeArgs<ExtArgs>
  }


  type itemsGetPayload<S extends boolean | null | undefined | itemsArgs> = $Types.GetResult<itemsPayload, S>

  type itemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<itemsFindManyArgs, 'select' | 'include'> & {
      select?: ItemsCountAggregateInputType | true
    }

  export interface itemsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['items'], meta: { name: 'items' } }
    /**
     * Find zero or one Items that matches the filter.
     * @param {itemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, itemsFindUniqueArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {itemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends itemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsFindFirstArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends itemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Items.
     * @param {itemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends itemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, itemsCreateArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     *     @param {itemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {itemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends itemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, itemsDeleteArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Items.
     * @param {itemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, itemsUpdateArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {itemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, itemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {itemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends itemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, itemsUpsertArgs<ExtArgs>>
    ): Prisma__itemsClient<$Types.GetResult<itemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemsCountArgs>(
      args?: Subset<T, itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): Prisma.PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: itemsGroupByArgs['orderBy'] }
        : { orderBy?: itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the items model
   */
  readonly fields: itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    history<T extends items$historyArgs<ExtArgs> = {}>(args?: Subset<T, items$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<historyPayload<ExtArgs>, T, 'findMany'>| Null>;

    detailItems<T extends detail_itemsArgs<ExtArgs> = {}>(args?: Subset<T, detail_itemsArgs<ExtArgs>>): Prisma__detail_itemsClient<$Types.GetResult<detail_itemsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends userArgs<ExtArgs> = {}>(args?: Subset<T, userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the items model
   */ 
  interface itemsFieldRefs {
    readonly id: FieldRef<"items", 'Int'>
    readonly detailId: FieldRef<"items", 'Int'>
    readonly userId: FieldRef<"items", 'Int'>
    readonly status: FieldRef<"items", 'items_status'>
    readonly createdAt: FieldRef<"items", 'DateTime'>
    readonly updatedAt: FieldRef<"items", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * items findUnique
   */
  export type itemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where: itemsWhereUniqueInput
  }


  /**
   * items findUniqueOrThrow
   */
  export type itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where: itemsWhereUniqueInput
  }


  /**
   * items findFirst
   */
  export type itemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * items findFirstOrThrow
   */
  export type itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * items findMany
   */
  export type itemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     */
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * items create
   */
  export type itemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a items.
     */
    data: XOR<itemsCreateInput, itemsUncheckedCreateInput>
  }


  /**
   * items createMany
   */
  export type itemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many items.
     */
    data: itemsCreateManyInput | itemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * items update
   */
  export type itemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a items.
     */
    data: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
    /**
     * Choose, which items to update.
     */
    where: itemsWhereUniqueInput
  }


  /**
   * items updateMany
   */
  export type itemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update items.
     */
    data: XOR<itemsUpdateManyMutationInput, itemsUncheckedUpdateManyInput>
    /**
     * Filter which items to update
     */
    where?: itemsWhereInput
  }


  /**
   * items upsert
   */
  export type itemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the items to update in case it exists.
     */
    where: itemsWhereUniqueInput
    /**
     * In case the items found by the `where` argument doesn't exist, create a new items with this data.
     */
    create: XOR<itemsCreateInput, itemsUncheckedCreateInput>
    /**
     * In case the items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
  }


  /**
   * items delete
   */
  export type itemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    /**
     * Filter which items to delete.
     */
    where: itemsWhereUniqueInput
  }


  /**
   * items deleteMany
   */
  export type itemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which items to delete
     */
    where?: itemsWhereInput
  }


  /**
   * items.history
   */
  export type items$historyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the history
     */
    select?: historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: historyInclude<ExtArgs> | null
    where?: historyWhereInput
    orderBy?: historyOrderByWithRelationInput | historyOrderByWithRelationInput[]
    cursor?: historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * items without action
   */
  export type itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    nik: string | null
    phone: string | null
    address: string | null
    username: string | null
    email: string | null
    password: string | null
    role: user_role | null
    is_active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    nik: string | null
    phone: string | null
    address: string | null
    username: string | null
    email: string | null
    password: string | null
    role: user_role | null
    is_active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    nik: number
    phone: number
    address: number
    username: number
    email: number
    password: number
    role: number
    is_active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    nik?: true
    phone?: true
    address?: true
    username?: true
    email?: true
    password?: true
    role?: true
    is_active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    nik?: true
    phone?: true
    address?: true
    username?: true
    email?: true
    password?: true
    role?: true
    is_active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    nik?: true
    phone?: true
    address?: true
    username?: true
    email?: true
    password?: true
    role?: true
    is_active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role: user_role
    is_active: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nik?: boolean
    phone?: boolean
    address?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    is_active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | user$itemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    nik?: boolean
    phone?: boolean
    address?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    is_active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    items?: boolean | user$itemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type userGetPayload<S extends boolean | null | undefined | userArgs> = $Types.GetResult<userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    items<T extends user$itemsArgs<ExtArgs> = {}>(args?: Subset<T, user$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<itemsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly name: FieldRef<"user", 'String'>
    readonly nik: FieldRef<"user", 'String'>
    readonly phone: FieldRef<"user", 'String'>
    readonly address: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'user_role'>
    readonly is_active: FieldRef<"user", 'Boolean'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.items
   */
  export type user$itemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the items
     */
    select?: itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemsInclude<ExtArgs> | null
    where?: itemsWhereInput
    orderBy?: itemsOrderByWithRelationInput | itemsOrderByWithRelationInput[]
    cursor?: itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * user without action
   */
  export type userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model acces
   */


  export type AggregateAcces = {
    _count: AccesCountAggregateOutputType | null
    _avg: AccesAvgAggregateOutputType | null
    _sum: AccesSumAggregateOutputType | null
    _min: AccesMinAggregateOutputType | null
    _max: AccesMaxAggregateOutputType | null
  }

  export type AccesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AccesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AccesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    token: string | null
  }

  export type AccesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    token: string | null
  }

  export type AccesCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    token: number
    _all: number
  }


  export type AccesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AccesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AccesMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    token?: true
  }

  export type AccesMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    token?: true
  }

  export type AccesCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    token?: true
    _all?: true
  }

  export type AccesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which acces to aggregate.
     */
    where?: accesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces to fetch.
     */
    orderBy?: accesOrderByWithRelationInput | accesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: accesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned acces
    **/
    _count?: true | AccesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccesMaxAggregateInputType
  }

  export type GetAccesAggregateType<T extends AccesAggregateArgs> = {
        [P in keyof T & keyof AggregateAcces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcces[P]>
      : GetScalarType<T[P], AggregateAcces[P]>
  }




  export type accesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: accesWhereInput
    orderBy?: accesOrderByWithAggregationInput | accesOrderByWithAggregationInput[]
    by: AccesScalarFieldEnum[] | AccesScalarFieldEnum
    having?: accesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccesCountAggregateInputType | true
    _avg?: AccesAvgAggregateInputType
    _sum?: AccesSumAggregateInputType
    _min?: AccesMinAggregateInputType
    _max?: AccesMaxAggregateInputType
  }


  export type AccesGroupByOutputType = {
    id: number
    userId: number
    name: string
    token: string
    _count: AccesCountAggregateOutputType | null
    _avg: AccesAvgAggregateOutputType | null
    _sum: AccesSumAggregateOutputType | null
    _min: AccesMinAggregateOutputType | null
    _max: AccesMaxAggregateOutputType | null
  }

  type GetAccesGroupByPayload<T extends accesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccesGroupByOutputType[P]>
            : GetScalarType<T[P], AccesGroupByOutputType[P]>
        }
      >
    >


  export type accesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    token?: boolean
  }, ExtArgs["result"]["acces"]>

  export type accesSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    token?: boolean
  }


  type accesGetPayload<S extends boolean | null | undefined | accesArgs> = $Types.GetResult<accesPayload, S>

  type accesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<accesFindManyArgs, 'select' | 'include'> & {
      select?: AccesCountAggregateInputType | true
    }

  export interface accesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['acces'], meta: { name: 'acces' } }
    /**
     * Find zero or one Acces that matches the filter.
     * @param {accesFindUniqueArgs} args - Arguments to find a Acces
     * @example
     * // Get one Acces
     * const acces = await prisma.acces.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends accesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, accesFindUniqueArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Acces that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {accesFindUniqueOrThrowArgs} args - Arguments to find a Acces
     * @example
     * // Get one Acces
     * const acces = await prisma.acces.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends accesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, accesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Acces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesFindFirstArgs} args - Arguments to find a Acces
     * @example
     * // Get one Acces
     * const acces = await prisma.acces.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends accesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, accesFindFirstArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Acces that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesFindFirstOrThrowArgs} args - Arguments to find a Acces
     * @example
     * // Get one Acces
     * const acces = await prisma.acces.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends accesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, accesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Acces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Acces
     * const acces = await prisma.acces.findMany()
     * 
     * // Get first 10 Acces
     * const acces = await prisma.acces.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accesWithIdOnly = await prisma.acces.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends accesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<accesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Acces.
     * @param {accesCreateArgs} args - Arguments to create a Acces.
     * @example
     * // Create one Acces
     * const Acces = await prisma.acces.create({
     *   data: {
     *     // ... data to create a Acces
     *   }
     * })
     * 
    **/
    create<T extends accesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, accesCreateArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Acces.
     *     @param {accesCreateManyArgs} args - Arguments to create many Acces.
     *     @example
     *     // Create many Acces
     *     const acces = await prisma.acces.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends accesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Acces.
     * @param {accesDeleteArgs} args - Arguments to delete one Acces.
     * @example
     * // Delete one Acces
     * const Acces = await prisma.acces.delete({
     *   where: {
     *     // ... filter to delete one Acces
     *   }
     * })
     * 
    **/
    delete<T extends accesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, accesDeleteArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Acces.
     * @param {accesUpdateArgs} args - Arguments to update one Acces.
     * @example
     * // Update one Acces
     * const acces = await prisma.acces.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends accesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, accesUpdateArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Acces.
     * @param {accesDeleteManyArgs} args - Arguments to filter Acces to delete.
     * @example
     * // Delete a few Acces
     * const { count } = await prisma.acces.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends accesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Acces
     * const acces = await prisma.acces.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends accesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, accesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Acces.
     * @param {accesUpsertArgs} args - Arguments to update or create a Acces.
     * @example
     * // Update or create a Acces
     * const acces = await prisma.acces.upsert({
     *   create: {
     *     // ... data to create a Acces
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acces we want to update
     *   }
     * })
    **/
    upsert<T extends accesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, accesUpsertArgs<ExtArgs>>
    ): Prisma__accesClient<$Types.GetResult<accesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Acces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesCountArgs} args - Arguments to filter Acces to count.
     * @example
     * // Count the number of Acces
     * const count = await prisma.acces.count({
     *   where: {
     *     // ... the filter for the Acces we want to count
     *   }
     * })
    **/
    count<T extends accesCountArgs>(
      args?: Subset<T, accesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccesAggregateArgs>(args: Subset<T, AccesAggregateArgs>): Prisma.PrismaPromise<GetAccesAggregateType<T>>

    /**
     * Group by Acces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends accesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: accesGroupByArgs['orderBy'] }
        : { orderBy?: accesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, accesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the acces model
   */
  readonly fields: accesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for acces.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__accesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the acces model
   */ 
  interface accesFieldRefs {
    readonly id: FieldRef<"acces", 'Int'>
    readonly userId: FieldRef<"acces", 'Int'>
    readonly name: FieldRef<"acces", 'String'>
    readonly token: FieldRef<"acces", 'String'>
  }
    

  // Custom InputTypes

  /**
   * acces findUnique
   */
  export type accesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter, which acces to fetch.
     */
    where: accesWhereUniqueInput
  }


  /**
   * acces findUniqueOrThrow
   */
  export type accesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter, which acces to fetch.
     */
    where: accesWhereUniqueInput
  }


  /**
   * acces findFirst
   */
  export type accesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter, which acces to fetch.
     */
    where?: accesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces to fetch.
     */
    orderBy?: accesOrderByWithRelationInput | accesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for acces.
     */
    cursor?: accesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of acces.
     */
    distinct?: AccesScalarFieldEnum | AccesScalarFieldEnum[]
  }


  /**
   * acces findFirstOrThrow
   */
  export type accesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter, which acces to fetch.
     */
    where?: accesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces to fetch.
     */
    orderBy?: accesOrderByWithRelationInput | accesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for acces.
     */
    cursor?: accesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of acces.
     */
    distinct?: AccesScalarFieldEnum | AccesScalarFieldEnum[]
  }


  /**
   * acces findMany
   */
  export type accesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter, which acces to fetch.
     */
    where?: accesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acces to fetch.
     */
    orderBy?: accesOrderByWithRelationInput | accesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing acces.
     */
    cursor?: accesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acces.
     */
    skip?: number
    distinct?: AccesScalarFieldEnum | AccesScalarFieldEnum[]
  }


  /**
   * acces create
   */
  export type accesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * The data needed to create a acces.
     */
    data: XOR<accesCreateInput, accesUncheckedCreateInput>
  }


  /**
   * acces createMany
   */
  export type accesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many acces.
     */
    data: accesCreateManyInput | accesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * acces update
   */
  export type accesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * The data needed to update a acces.
     */
    data: XOR<accesUpdateInput, accesUncheckedUpdateInput>
    /**
     * Choose, which acces to update.
     */
    where: accesWhereUniqueInput
  }


  /**
   * acces updateMany
   */
  export type accesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update acces.
     */
    data: XOR<accesUpdateManyMutationInput, accesUncheckedUpdateManyInput>
    /**
     * Filter which acces to update
     */
    where?: accesWhereInput
  }


  /**
   * acces upsert
   */
  export type accesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * The filter to search for the acces to update in case it exists.
     */
    where: accesWhereUniqueInput
    /**
     * In case the acces found by the `where` argument doesn't exist, create a new acces with this data.
     */
    create: XOR<accesCreateInput, accesUncheckedCreateInput>
    /**
     * In case the acces was found with the provided `where` argument, update it with this data.
     */
    update: XOR<accesUpdateInput, accesUncheckedUpdateInput>
  }


  /**
   * acces delete
   */
  export type accesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
    /**
     * Filter which acces to delete.
     */
    where: accesWhereUniqueInput
  }


  /**
   * acces deleteMany
   */
  export type accesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which acces to delete
     */
    where?: accesWhereInput
  }


  /**
   * acces without action
   */
  export type accesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acces
     */
    select?: accesSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    category: 'category'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    id: 'id',
    itemsId: 'itemsId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const Detail_itemsScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    quantity: 'quantity',
    description: 'description',
    url: 'url',
    price: 'price',
    total: 'total',
    duedate: 'duedate'
  };

  export type Detail_itemsScalarFieldEnum = (typeof Detail_itemsScalarFieldEnum)[keyof typeof Detail_itemsScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    detailId: 'detailId',
    userId: 'userId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nik: 'nik',
    phone: 'phone',
    address: 'address',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    is_active: 'is_active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    token: 'token'
  };

  export type AccesScalarFieldEnum = (typeof AccesScalarFieldEnum)[keyof typeof AccesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'items_status'
   */
  export type Enumitems_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'items_status'>
    


  /**
   * Reference to a field of type 'user_role'
   */
  export type Enumuser_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_role'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: IntFilter<"category"> | number
    category?: StringFilter<"category"> | string
    detail_items?: Detail_itemsListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    detail_items?: detail_itemsOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    category?: StringFilter<"category"> | string
    detail_items?: Detail_itemsListRelationFilter
  }, "id">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"category"> | number
    category?: StringWithAggregatesFilter<"category"> | string
  }

  export type historyWhereInput = {
    AND?: historyWhereInput | historyWhereInput[]
    OR?: historyWhereInput[]
    NOT?: historyWhereInput | historyWhereInput[]
    id?: IntFilter<"history"> | number
    itemsId?: IntFilter<"history"> | number
    reason?: StringFilter<"history"> | string
    createdAt?: DateTimeFilter<"history"> | Date | string
    items?: XOR<ItemsRelationFilter, itemsWhereInput>
  }

  export type historyOrderByWithRelationInput = {
    id?: SortOrder
    itemsId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    items?: itemsOrderByWithRelationInput
  }

  export type historyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: historyWhereInput | historyWhereInput[]
    OR?: historyWhereInput[]
    NOT?: historyWhereInput | historyWhereInput[]
    itemsId?: IntFilter<"history"> | number
    reason?: StringFilter<"history"> | string
    createdAt?: DateTimeFilter<"history"> | Date | string
    items?: XOR<ItemsRelationFilter, itemsWhereInput>
  }, "id">

  export type historyOrderByWithAggregationInput = {
    id?: SortOrder
    itemsId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: historyCountOrderByAggregateInput
    _avg?: historyAvgOrderByAggregateInput
    _max?: historyMaxOrderByAggregateInput
    _min?: historyMinOrderByAggregateInput
    _sum?: historySumOrderByAggregateInput
  }

  export type historyScalarWhereWithAggregatesInput = {
    AND?: historyScalarWhereWithAggregatesInput | historyScalarWhereWithAggregatesInput[]
    OR?: historyScalarWhereWithAggregatesInput[]
    NOT?: historyScalarWhereWithAggregatesInput | historyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"history"> | number
    itemsId?: IntWithAggregatesFilter<"history"> | number
    reason?: StringWithAggregatesFilter<"history"> | string
    createdAt?: DateTimeWithAggregatesFilter<"history"> | Date | string
  }

  export type detail_itemsWhereInput = {
    AND?: detail_itemsWhereInput | detail_itemsWhereInput[]
    OR?: detail_itemsWhereInput[]
    NOT?: detail_itemsWhereInput | detail_itemsWhereInput[]
    id?: IntFilter<"detail_items"> | number
    categoryId?: IntFilter<"detail_items"> | number
    name?: StringFilter<"detail_items"> | string
    quantity?: IntFilter<"detail_items"> | number
    description?: StringFilter<"detail_items"> | string
    url?: StringFilter<"detail_items"> | string
    price?: FloatFilter<"detail_items"> | number
    total?: FloatFilter<"detail_items"> | number
    duedate?: DateTimeFilter<"detail_items"> | Date | string
    items?: ItemsListRelationFilter
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
  }

  export type detail_itemsOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    url?: SortOrder
    price?: SortOrder
    total?: SortOrder
    duedate?: SortOrder
    items?: itemsOrderByRelationAggregateInput
    category?: categoryOrderByWithRelationInput
  }

  export type detail_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: detail_itemsWhereInput | detail_itemsWhereInput[]
    OR?: detail_itemsWhereInput[]
    NOT?: detail_itemsWhereInput | detail_itemsWhereInput[]
    categoryId?: IntFilter<"detail_items"> | number
    name?: StringFilter<"detail_items"> | string
    quantity?: IntFilter<"detail_items"> | number
    description?: StringFilter<"detail_items"> | string
    url?: StringFilter<"detail_items"> | string
    price?: FloatFilter<"detail_items"> | number
    total?: FloatFilter<"detail_items"> | number
    duedate?: DateTimeFilter<"detail_items"> | Date | string
    items?: ItemsListRelationFilter
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
  }, "id">

  export type detail_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    url?: SortOrder
    price?: SortOrder
    total?: SortOrder
    duedate?: SortOrder
    _count?: detail_itemsCountOrderByAggregateInput
    _avg?: detail_itemsAvgOrderByAggregateInput
    _max?: detail_itemsMaxOrderByAggregateInput
    _min?: detail_itemsMinOrderByAggregateInput
    _sum?: detail_itemsSumOrderByAggregateInput
  }

  export type detail_itemsScalarWhereWithAggregatesInput = {
    AND?: detail_itemsScalarWhereWithAggregatesInput | detail_itemsScalarWhereWithAggregatesInput[]
    OR?: detail_itemsScalarWhereWithAggregatesInput[]
    NOT?: detail_itemsScalarWhereWithAggregatesInput | detail_itemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"detail_items"> | number
    categoryId?: IntWithAggregatesFilter<"detail_items"> | number
    name?: StringWithAggregatesFilter<"detail_items"> | string
    quantity?: IntWithAggregatesFilter<"detail_items"> | number
    description?: StringWithAggregatesFilter<"detail_items"> | string
    url?: StringWithAggregatesFilter<"detail_items"> | string
    price?: FloatWithAggregatesFilter<"detail_items"> | number
    total?: FloatWithAggregatesFilter<"detail_items"> | number
    duedate?: DateTimeWithAggregatesFilter<"detail_items"> | Date | string
  }

  export type itemsWhereInput = {
    AND?: itemsWhereInput | itemsWhereInput[]
    OR?: itemsWhereInput[]
    NOT?: itemsWhereInput | itemsWhereInput[]
    id?: IntFilter<"items"> | number
    detailId?: IntFilter<"items"> | number
    userId?: IntFilter<"items"> | number
    status?: Enumitems_statusFilter<"items"> | items_status
    createdAt?: DateTimeFilter<"items"> | Date | string
    updatedAt?: DateTimeFilter<"items"> | Date | string
    history?: HistoryListRelationFilter
    detailItems?: XOR<Detail_itemsRelationFilter, detail_itemsWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type itemsOrderByWithRelationInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    history?: historyOrderByRelationAggregateInput
    detailItems?: detail_itemsOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: itemsWhereInput | itemsWhereInput[]
    OR?: itemsWhereInput[]
    NOT?: itemsWhereInput | itemsWhereInput[]
    detailId?: IntFilter<"items"> | number
    userId?: IntFilter<"items"> | number
    status?: Enumitems_statusFilter<"items"> | items_status
    createdAt?: DateTimeFilter<"items"> | Date | string
    updatedAt?: DateTimeFilter<"items"> | Date | string
    history?: HistoryListRelationFilter
    detailItems?: XOR<Detail_itemsRelationFilter, detail_itemsWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "id">

  export type itemsOrderByWithAggregationInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: itemsCountOrderByAggregateInput
    _avg?: itemsAvgOrderByAggregateInput
    _max?: itemsMaxOrderByAggregateInput
    _min?: itemsMinOrderByAggregateInput
    _sum?: itemsSumOrderByAggregateInput
  }

  export type itemsScalarWhereWithAggregatesInput = {
    AND?: itemsScalarWhereWithAggregatesInput | itemsScalarWhereWithAggregatesInput[]
    OR?: itemsScalarWhereWithAggregatesInput[]
    NOT?: itemsScalarWhereWithAggregatesInput | itemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"items"> | number
    detailId?: IntWithAggregatesFilter<"items"> | number
    userId?: IntWithAggregatesFilter<"items"> | number
    status?: Enumitems_statusWithAggregatesFilter<"items"> | items_status
    createdAt?: DateTimeWithAggregatesFilter<"items"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"items"> | Date | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    name?: StringFilter<"user"> | string
    nik?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    address?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | user_role
    is_active?: BoolFilter<"user"> | boolean
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    items?: ItemsListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nik?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    is_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: itemsOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    nik?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    address?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | user_role
    is_active?: BoolFilter<"user"> | boolean
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    items?: ItemsListRelationFilter
  }, "id" | "username" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nik?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    is_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    name?: StringWithAggregatesFilter<"user"> | string
    nik?: StringWithAggregatesFilter<"user"> | string
    phone?: StringWithAggregatesFilter<"user"> | string
    address?: StringWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    role?: Enumuser_roleWithAggregatesFilter<"user"> | user_role
    is_active?: BoolWithAggregatesFilter<"user"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type accesWhereInput = {
    AND?: accesWhereInput | accesWhereInput[]
    OR?: accesWhereInput[]
    NOT?: accesWhereInput | accesWhereInput[]
    id?: IntFilter<"acces"> | number
    userId?: IntFilter<"acces"> | number
    name?: StringFilter<"acces"> | string
    token?: StringFilter<"acces"> | string
  }

  export type accesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type accesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: accesWhereInput | accesWhereInput[]
    OR?: accesWhereInput[]
    NOT?: accesWhereInput | accesWhereInput[]
    userId?: IntFilter<"acces"> | number
    name?: StringFilter<"acces"> | string
    token?: StringFilter<"acces"> | string
  }, "id">

  export type accesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    token?: SortOrder
    _count?: accesCountOrderByAggregateInput
    _avg?: accesAvgOrderByAggregateInput
    _max?: accesMaxOrderByAggregateInput
    _min?: accesMinOrderByAggregateInput
    _sum?: accesSumOrderByAggregateInput
  }

  export type accesScalarWhereWithAggregatesInput = {
    AND?: accesScalarWhereWithAggregatesInput | accesScalarWhereWithAggregatesInput[]
    OR?: accesScalarWhereWithAggregatesInput[]
    NOT?: accesScalarWhereWithAggregatesInput | accesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"acces"> | number
    userId?: IntWithAggregatesFilter<"acces"> | number
    name?: StringWithAggregatesFilter<"acces"> | string
    token?: StringWithAggregatesFilter<"acces"> | string
  }

  export type categoryCreateInput = {
    category: string
    detail_items?: detail_itemsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    category: string
    detail_items?: detail_itemsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    detail_items?: detail_itemsUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    detail_items?: detail_itemsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: number
    category: string
  }

  export type categoryUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
  }

  export type historyCreateInput = {
    reason?: string
    createdAt?: Date | string
    items: itemsCreateNestedOneWithoutHistoryInput
  }

  export type historyUncheckedCreateInput = {
    id?: number
    itemsId: number
    reason?: string
    createdAt?: Date | string
  }

  export type historyUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type historyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemsId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type historyCreateManyInput = {
    id?: number
    itemsId: number
    reason?: string
    createdAt?: Date | string
  }

  export type historyUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type historyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemsId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type detail_itemsCreateInput = {
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
    items?: itemsCreateNestedManyWithoutDetailItemsInput
    category: categoryCreateNestedOneWithoutDetail_itemsInput
  }

  export type detail_itemsUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
    items?: itemsUncheckedCreateNestedManyWithoutDetailItemsInput
  }

  export type detail_itemsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUpdateManyWithoutDetailItemsNestedInput
    category?: categoryUpdateOneRequiredWithoutDetail_itemsNestedInput
  }

  export type detail_itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUncheckedUpdateManyWithoutDetailItemsNestedInput
  }

  export type detail_itemsCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
  }

  export type detail_itemsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type detail_itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsCreateInput = {
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyCreateNestedManyWithoutItemsInput
    detailItems: detail_itemsCreateNestedOneWithoutItemsInput
    user: userCreateNestedOneWithoutItemsInput
  }

  export type itemsUncheckedCreateInput = {
    id?: number
    detailId: number
    userId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyUncheckedCreateNestedManyWithoutItemsInput
  }

  export type itemsUpdateInput = {
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUpdateManyWithoutItemsNestedInput
    detailItems?: detail_itemsUpdateOneRequiredWithoutItemsNestedInput
    user?: userUpdateOneRequiredWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    detailId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type itemsCreateManyInput = {
    id?: number
    detailId: number
    userId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type itemsUpdateManyMutationInput = {
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    detailId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role?: user_role
    is_active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: itemsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role?: user_role
    is_active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: itemsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role?: user_role
    is_active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type accesCreateInput = {
    userId: number
    name: string
    token: string
  }

  export type accesUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    token: string
  }

  export type accesUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type accesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type accesCreateManyInput = {
    id?: number
    userId: number
    name: string
    token: string
  }

  export type accesUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type accesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Detail_itemsListRelationFilter = {
    every?: detail_itemsWhereInput
    some?: detail_itemsWhereInput
    none?: detail_itemsWhereInput
  }

  export type detail_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ItemsRelationFilter = {
    is?: itemsWhereInput
    isNot?: itemsWhereInput
  }

  export type historyCountOrderByAggregateInput = {
    id?: SortOrder
    itemsId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type historyAvgOrderByAggregateInput = {
    id?: SortOrder
    itemsId?: SortOrder
  }

  export type historyMaxOrderByAggregateInput = {
    id?: SortOrder
    itemsId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type historyMinOrderByAggregateInput = {
    id?: SortOrder
    itemsId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type historySumOrderByAggregateInput = {
    id?: SortOrder
    itemsId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ItemsListRelationFilter = {
    every?: itemsWhereInput
    some?: itemsWhereInput
    none?: itemsWhereInput
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type detail_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    url?: SortOrder
    price?: SortOrder
    total?: SortOrder
    duedate?: SortOrder
  }

  export type detail_itemsAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
  }

  export type detail_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    url?: SortOrder
    price?: SortOrder
    total?: SortOrder
    duedate?: SortOrder
  }

  export type detail_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    url?: SortOrder
    price?: SortOrder
    total?: SortOrder
    duedate?: SortOrder
  }

  export type detail_itemsSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type Enumitems_statusFilter<$PrismaModel = never> = {
    equals?: items_status | Enumitems_statusFieldRefInput<$PrismaModel>
    in?: items_status[]
    notIn?: items_status[]
    not?: NestedEnumitems_statusFilter<$PrismaModel> | items_status
  }

  export type HistoryListRelationFilter = {
    every?: historyWhereInput
    some?: historyWhereInput
    none?: historyWhereInput
  }

  export type Detail_itemsRelationFilter = {
    is?: detail_itemsWhereInput
    isNot?: detail_itemsWhereInput
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type itemsCountOrderByAggregateInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type itemsAvgOrderByAggregateInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
  }

  export type itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type itemsMinOrderByAggregateInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type itemsSumOrderByAggregateInput = {
    id?: SortOrder
    detailId?: SortOrder
    userId?: SortOrder
  }

  export type Enumitems_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: items_status | Enumitems_statusFieldRefInput<$PrismaModel>
    in?: items_status[]
    notIn?: items_status[]
    not?: NestedEnumitems_statusWithAggregatesFilter<$PrismaModel> | items_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumitems_statusFilter<$PrismaModel>
    _max?: NestedEnumitems_statusFilter<$PrismaModel>
  }

  export type Enumuser_roleFilter<$PrismaModel = never> = {
    equals?: user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: user_role[]
    notIn?: user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | user_role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nik?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    is_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nik?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    is_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nik?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    is_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: user_role[]
    notIn?: user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type accesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type accesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type accesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type accesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type accesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type detail_itemsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput> | detail_itemsCreateWithoutCategoryInput[] | detail_itemsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: detail_itemsCreateOrConnectWithoutCategoryInput | detail_itemsCreateOrConnectWithoutCategoryInput[]
    createMany?: detail_itemsCreateManyCategoryInputEnvelope
    connect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
  }

  export type detail_itemsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput> | detail_itemsCreateWithoutCategoryInput[] | detail_itemsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: detail_itemsCreateOrConnectWithoutCategoryInput | detail_itemsCreateOrConnectWithoutCategoryInput[]
    createMany?: detail_itemsCreateManyCategoryInputEnvelope
    connect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type detail_itemsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput> | detail_itemsCreateWithoutCategoryInput[] | detail_itemsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: detail_itemsCreateOrConnectWithoutCategoryInput | detail_itemsCreateOrConnectWithoutCategoryInput[]
    upsert?: detail_itemsUpsertWithWhereUniqueWithoutCategoryInput | detail_itemsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: detail_itemsCreateManyCategoryInputEnvelope
    set?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    disconnect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    delete?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    connect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    update?: detail_itemsUpdateWithWhereUniqueWithoutCategoryInput | detail_itemsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: detail_itemsUpdateManyWithWhereWithoutCategoryInput | detail_itemsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: detail_itemsScalarWhereInput | detail_itemsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type detail_itemsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput> | detail_itemsCreateWithoutCategoryInput[] | detail_itemsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: detail_itemsCreateOrConnectWithoutCategoryInput | detail_itemsCreateOrConnectWithoutCategoryInput[]
    upsert?: detail_itemsUpsertWithWhereUniqueWithoutCategoryInput | detail_itemsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: detail_itemsCreateManyCategoryInputEnvelope
    set?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    disconnect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    delete?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    connect?: detail_itemsWhereUniqueInput | detail_itemsWhereUniqueInput[]
    update?: detail_itemsUpdateWithWhereUniqueWithoutCategoryInput | detail_itemsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: detail_itemsUpdateManyWithWhereWithoutCategoryInput | detail_itemsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: detail_itemsScalarWhereInput | detail_itemsScalarWhereInput[]
  }

  export type itemsCreateNestedOneWithoutHistoryInput = {
    create?: XOR<itemsCreateWithoutHistoryInput, itemsUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: itemsCreateOrConnectWithoutHistoryInput
    connect?: itemsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type itemsUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<itemsCreateWithoutHistoryInput, itemsUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: itemsCreateOrConnectWithoutHistoryInput
    upsert?: itemsUpsertWithoutHistoryInput
    connect?: itemsWhereUniqueInput
    update?: XOR<XOR<itemsUpdateToOneWithWhereWithoutHistoryInput, itemsUpdateWithoutHistoryInput>, itemsUncheckedUpdateWithoutHistoryInput>
  }

  export type itemsCreateNestedManyWithoutDetailItemsInput = {
    create?: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput> | itemsCreateWithoutDetailItemsInput[] | itemsUncheckedCreateWithoutDetailItemsInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutDetailItemsInput | itemsCreateOrConnectWithoutDetailItemsInput[]
    createMany?: itemsCreateManyDetailItemsInputEnvelope
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
  }

  export type categoryCreateNestedOneWithoutDetail_itemsInput = {
    create?: XOR<categoryCreateWithoutDetail_itemsInput, categoryUncheckedCreateWithoutDetail_itemsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutDetail_itemsInput
    connect?: categoryWhereUniqueInput
  }

  export type itemsUncheckedCreateNestedManyWithoutDetailItemsInput = {
    create?: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput> | itemsCreateWithoutDetailItemsInput[] | itemsUncheckedCreateWithoutDetailItemsInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutDetailItemsInput | itemsCreateOrConnectWithoutDetailItemsInput[]
    createMany?: itemsCreateManyDetailItemsInputEnvelope
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type itemsUpdateManyWithoutDetailItemsNestedInput = {
    create?: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput> | itemsCreateWithoutDetailItemsInput[] | itemsUncheckedCreateWithoutDetailItemsInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutDetailItemsInput | itemsCreateOrConnectWithoutDetailItemsInput[]
    upsert?: itemsUpsertWithWhereUniqueWithoutDetailItemsInput | itemsUpsertWithWhereUniqueWithoutDetailItemsInput[]
    createMany?: itemsCreateManyDetailItemsInputEnvelope
    set?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    disconnect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    delete?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    update?: itemsUpdateWithWhereUniqueWithoutDetailItemsInput | itemsUpdateWithWhereUniqueWithoutDetailItemsInput[]
    updateMany?: itemsUpdateManyWithWhereWithoutDetailItemsInput | itemsUpdateManyWithWhereWithoutDetailItemsInput[]
    deleteMany?: itemsScalarWhereInput | itemsScalarWhereInput[]
  }

  export type categoryUpdateOneRequiredWithoutDetail_itemsNestedInput = {
    create?: XOR<categoryCreateWithoutDetail_itemsInput, categoryUncheckedCreateWithoutDetail_itemsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutDetail_itemsInput
    upsert?: categoryUpsertWithoutDetail_itemsInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutDetail_itemsInput, categoryUpdateWithoutDetail_itemsInput>, categoryUncheckedUpdateWithoutDetail_itemsInput>
  }

  export type itemsUncheckedUpdateManyWithoutDetailItemsNestedInput = {
    create?: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput> | itemsCreateWithoutDetailItemsInput[] | itemsUncheckedCreateWithoutDetailItemsInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutDetailItemsInput | itemsCreateOrConnectWithoutDetailItemsInput[]
    upsert?: itemsUpsertWithWhereUniqueWithoutDetailItemsInput | itemsUpsertWithWhereUniqueWithoutDetailItemsInput[]
    createMany?: itemsCreateManyDetailItemsInputEnvelope
    set?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    disconnect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    delete?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    update?: itemsUpdateWithWhereUniqueWithoutDetailItemsInput | itemsUpdateWithWhereUniqueWithoutDetailItemsInput[]
    updateMany?: itemsUpdateManyWithWhereWithoutDetailItemsInput | itemsUpdateManyWithWhereWithoutDetailItemsInput[]
    deleteMany?: itemsScalarWhereInput | itemsScalarWhereInput[]
  }

  export type historyCreateNestedManyWithoutItemsInput = {
    create?: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput> | historyCreateWithoutItemsInput[] | historyUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: historyCreateOrConnectWithoutItemsInput | historyCreateOrConnectWithoutItemsInput[]
    createMany?: historyCreateManyItemsInputEnvelope
    connect?: historyWhereUniqueInput | historyWhereUniqueInput[]
  }

  export type detail_itemsCreateNestedOneWithoutItemsInput = {
    create?: XOR<detail_itemsCreateWithoutItemsInput, detail_itemsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: detail_itemsCreateOrConnectWithoutItemsInput
    connect?: detail_itemsWhereUniqueInput
  }

  export type userCreateNestedOneWithoutItemsInput = {
    create?: XOR<userCreateWithoutItemsInput, userUncheckedCreateWithoutItemsInput>
    connectOrCreate?: userCreateOrConnectWithoutItemsInput
    connect?: userWhereUniqueInput
  }

  export type historyUncheckedCreateNestedManyWithoutItemsInput = {
    create?: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput> | historyCreateWithoutItemsInput[] | historyUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: historyCreateOrConnectWithoutItemsInput | historyCreateOrConnectWithoutItemsInput[]
    createMany?: historyCreateManyItemsInputEnvelope
    connect?: historyWhereUniqueInput | historyWhereUniqueInput[]
  }

  export type Enumitems_statusFieldUpdateOperationsInput = {
    set?: items_status
  }

  export type historyUpdateManyWithoutItemsNestedInput = {
    create?: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput> | historyCreateWithoutItemsInput[] | historyUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: historyCreateOrConnectWithoutItemsInput | historyCreateOrConnectWithoutItemsInput[]
    upsert?: historyUpsertWithWhereUniqueWithoutItemsInput | historyUpsertWithWhereUniqueWithoutItemsInput[]
    createMany?: historyCreateManyItemsInputEnvelope
    set?: historyWhereUniqueInput | historyWhereUniqueInput[]
    disconnect?: historyWhereUniqueInput | historyWhereUniqueInput[]
    delete?: historyWhereUniqueInput | historyWhereUniqueInput[]
    connect?: historyWhereUniqueInput | historyWhereUniqueInput[]
    update?: historyUpdateWithWhereUniqueWithoutItemsInput | historyUpdateWithWhereUniqueWithoutItemsInput[]
    updateMany?: historyUpdateManyWithWhereWithoutItemsInput | historyUpdateManyWithWhereWithoutItemsInput[]
    deleteMany?: historyScalarWhereInput | historyScalarWhereInput[]
  }

  export type detail_itemsUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<detail_itemsCreateWithoutItemsInput, detail_itemsUncheckedCreateWithoutItemsInput>
    connectOrCreate?: detail_itemsCreateOrConnectWithoutItemsInput
    upsert?: detail_itemsUpsertWithoutItemsInput
    connect?: detail_itemsWhereUniqueInput
    update?: XOR<XOR<detail_itemsUpdateToOneWithWhereWithoutItemsInput, detail_itemsUpdateWithoutItemsInput>, detail_itemsUncheckedUpdateWithoutItemsInput>
  }

  export type userUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<userCreateWithoutItemsInput, userUncheckedCreateWithoutItemsInput>
    connectOrCreate?: userCreateOrConnectWithoutItemsInput
    upsert?: userUpsertWithoutItemsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutItemsInput, userUpdateWithoutItemsInput>, userUncheckedUpdateWithoutItemsInput>
  }

  export type historyUncheckedUpdateManyWithoutItemsNestedInput = {
    create?: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput> | historyCreateWithoutItemsInput[] | historyUncheckedCreateWithoutItemsInput[]
    connectOrCreate?: historyCreateOrConnectWithoutItemsInput | historyCreateOrConnectWithoutItemsInput[]
    upsert?: historyUpsertWithWhereUniqueWithoutItemsInput | historyUpsertWithWhereUniqueWithoutItemsInput[]
    createMany?: historyCreateManyItemsInputEnvelope
    set?: historyWhereUniqueInput | historyWhereUniqueInput[]
    disconnect?: historyWhereUniqueInput | historyWhereUniqueInput[]
    delete?: historyWhereUniqueInput | historyWhereUniqueInput[]
    connect?: historyWhereUniqueInput | historyWhereUniqueInput[]
    update?: historyUpdateWithWhereUniqueWithoutItemsInput | historyUpdateWithWhereUniqueWithoutItemsInput[]
    updateMany?: historyUpdateManyWithWhereWithoutItemsInput | historyUpdateManyWithWhereWithoutItemsInput[]
    deleteMany?: historyScalarWhereInput | historyScalarWhereInput[]
  }

  export type itemsCreateNestedManyWithoutUserInput = {
    create?: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput> | itemsCreateWithoutUserInput[] | itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutUserInput | itemsCreateOrConnectWithoutUserInput[]
    createMany?: itemsCreateManyUserInputEnvelope
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
  }

  export type itemsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput> | itemsCreateWithoutUserInput[] | itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutUserInput | itemsCreateOrConnectWithoutUserInput[]
    createMany?: itemsCreateManyUserInputEnvelope
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
  }

  export type Enumuser_roleFieldUpdateOperationsInput = {
    set?: user_role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type itemsUpdateManyWithoutUserNestedInput = {
    create?: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput> | itemsCreateWithoutUserInput[] | itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutUserInput | itemsCreateOrConnectWithoutUserInput[]
    upsert?: itemsUpsertWithWhereUniqueWithoutUserInput | itemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: itemsCreateManyUserInputEnvelope
    set?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    disconnect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    delete?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    update?: itemsUpdateWithWhereUniqueWithoutUserInput | itemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: itemsUpdateManyWithWhereWithoutUserInput | itemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: itemsScalarWhereInput | itemsScalarWhereInput[]
  }

  export type itemsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput> | itemsCreateWithoutUserInput[] | itemsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: itemsCreateOrConnectWithoutUserInput | itemsCreateOrConnectWithoutUserInput[]
    upsert?: itemsUpsertWithWhereUniqueWithoutUserInput | itemsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: itemsCreateManyUserInputEnvelope
    set?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    disconnect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    delete?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    connect?: itemsWhereUniqueInput | itemsWhereUniqueInput[]
    update?: itemsUpdateWithWhereUniqueWithoutUserInput | itemsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: itemsUpdateManyWithWhereWithoutUserInput | itemsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: itemsScalarWhereInput | itemsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumitems_statusFilter<$PrismaModel = never> = {
    equals?: items_status | Enumitems_statusFieldRefInput<$PrismaModel>
    in?: items_status[]
    notIn?: items_status[]
    not?: NestedEnumitems_statusFilter<$PrismaModel> | items_status
  }

  export type NestedEnumitems_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: items_status | Enumitems_statusFieldRefInput<$PrismaModel>
    in?: items_status[]
    notIn?: items_status[]
    not?: NestedEnumitems_statusWithAggregatesFilter<$PrismaModel> | items_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumitems_statusFilter<$PrismaModel>
    _max?: NestedEnumitems_statusFilter<$PrismaModel>
  }

  export type NestedEnumuser_roleFilter<$PrismaModel = never> = {
    equals?: user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: user_role[]
    notIn?: user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | user_role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: user_role[]
    notIn?: user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type detail_itemsCreateWithoutCategoryInput = {
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
    items?: itemsCreateNestedManyWithoutDetailItemsInput
  }

  export type detail_itemsUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
    items?: itemsUncheckedCreateNestedManyWithoutDetailItemsInput
  }

  export type detail_itemsCreateOrConnectWithoutCategoryInput = {
    where: detail_itemsWhereUniqueInput
    create: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput>
  }

  export type detail_itemsCreateManyCategoryInputEnvelope = {
    data: detail_itemsCreateManyCategoryInput | detail_itemsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type detail_itemsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: detail_itemsWhereUniqueInput
    update: XOR<detail_itemsUpdateWithoutCategoryInput, detail_itemsUncheckedUpdateWithoutCategoryInput>
    create: XOR<detail_itemsCreateWithoutCategoryInput, detail_itemsUncheckedCreateWithoutCategoryInput>
  }

  export type detail_itemsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: detail_itemsWhereUniqueInput
    data: XOR<detail_itemsUpdateWithoutCategoryInput, detail_itemsUncheckedUpdateWithoutCategoryInput>
  }

  export type detail_itemsUpdateManyWithWhereWithoutCategoryInput = {
    where: detail_itemsScalarWhereInput
    data: XOR<detail_itemsUpdateManyMutationInput, detail_itemsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type detail_itemsScalarWhereInput = {
    AND?: detail_itemsScalarWhereInput | detail_itemsScalarWhereInput[]
    OR?: detail_itemsScalarWhereInput[]
    NOT?: detail_itemsScalarWhereInput | detail_itemsScalarWhereInput[]
    id?: IntFilter<"detail_items"> | number
    categoryId?: IntFilter<"detail_items"> | number
    name?: StringFilter<"detail_items"> | string
    quantity?: IntFilter<"detail_items"> | number
    description?: StringFilter<"detail_items"> | string
    url?: StringFilter<"detail_items"> | string
    price?: FloatFilter<"detail_items"> | number
    total?: FloatFilter<"detail_items"> | number
    duedate?: DateTimeFilter<"detail_items"> | Date | string
  }

  export type itemsCreateWithoutHistoryInput = {
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    detailItems: detail_itemsCreateNestedOneWithoutItemsInput
    user: userCreateNestedOneWithoutItemsInput
  }

  export type itemsUncheckedCreateWithoutHistoryInput = {
    id?: number
    detailId: number
    userId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type itemsCreateOrConnectWithoutHistoryInput = {
    where: itemsWhereUniqueInput
    create: XOR<itemsCreateWithoutHistoryInput, itemsUncheckedCreateWithoutHistoryInput>
  }

  export type itemsUpsertWithoutHistoryInput = {
    update: XOR<itemsUpdateWithoutHistoryInput, itemsUncheckedUpdateWithoutHistoryInput>
    create: XOR<itemsCreateWithoutHistoryInput, itemsUncheckedCreateWithoutHistoryInput>
    where?: itemsWhereInput
  }

  export type itemsUpdateToOneWithWhereWithoutHistoryInput = {
    where?: itemsWhereInput
    data: XOR<itemsUpdateWithoutHistoryInput, itemsUncheckedUpdateWithoutHistoryInput>
  }

  export type itemsUpdateWithoutHistoryInput = {
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detailItems?: detail_itemsUpdateOneRequiredWithoutItemsNestedInput
    user?: userUpdateOneRequiredWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    detailId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsCreateWithoutDetailItemsInput = {
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyCreateNestedManyWithoutItemsInput
    user: userCreateNestedOneWithoutItemsInput
  }

  export type itemsUncheckedCreateWithoutDetailItemsInput = {
    id?: number
    userId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyUncheckedCreateNestedManyWithoutItemsInput
  }

  export type itemsCreateOrConnectWithoutDetailItemsInput = {
    where: itemsWhereUniqueInput
    create: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput>
  }

  export type itemsCreateManyDetailItemsInputEnvelope = {
    data: itemsCreateManyDetailItemsInput | itemsCreateManyDetailItemsInput[]
    skipDuplicates?: boolean
  }

  export type categoryCreateWithoutDetail_itemsInput = {
    category: string
  }

  export type categoryUncheckedCreateWithoutDetail_itemsInput = {
    id?: number
    category: string
  }

  export type categoryCreateOrConnectWithoutDetail_itemsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutDetail_itemsInput, categoryUncheckedCreateWithoutDetail_itemsInput>
  }

  export type itemsUpsertWithWhereUniqueWithoutDetailItemsInput = {
    where: itemsWhereUniqueInput
    update: XOR<itemsUpdateWithoutDetailItemsInput, itemsUncheckedUpdateWithoutDetailItemsInput>
    create: XOR<itemsCreateWithoutDetailItemsInput, itemsUncheckedCreateWithoutDetailItemsInput>
  }

  export type itemsUpdateWithWhereUniqueWithoutDetailItemsInput = {
    where: itemsWhereUniqueInput
    data: XOR<itemsUpdateWithoutDetailItemsInput, itemsUncheckedUpdateWithoutDetailItemsInput>
  }

  export type itemsUpdateManyWithWhereWithoutDetailItemsInput = {
    where: itemsScalarWhereInput
    data: XOR<itemsUpdateManyMutationInput, itemsUncheckedUpdateManyWithoutDetailItemsInput>
  }

  export type itemsScalarWhereInput = {
    AND?: itemsScalarWhereInput | itemsScalarWhereInput[]
    OR?: itemsScalarWhereInput[]
    NOT?: itemsScalarWhereInput | itemsScalarWhereInput[]
    id?: IntFilter<"items"> | number
    detailId?: IntFilter<"items"> | number
    userId?: IntFilter<"items"> | number
    status?: Enumitems_statusFilter<"items"> | items_status
    createdAt?: DateTimeFilter<"items"> | Date | string
    updatedAt?: DateTimeFilter<"items"> | Date | string
  }

  export type categoryUpsertWithoutDetail_itemsInput = {
    update: XOR<categoryUpdateWithoutDetail_itemsInput, categoryUncheckedUpdateWithoutDetail_itemsInput>
    create: XOR<categoryCreateWithoutDetail_itemsInput, categoryUncheckedCreateWithoutDetail_itemsInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutDetail_itemsInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutDetail_itemsInput, categoryUncheckedUpdateWithoutDetail_itemsInput>
  }

  export type categoryUpdateWithoutDetail_itemsInput = {
    category?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateWithoutDetail_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
  }

  export type historyCreateWithoutItemsInput = {
    reason?: string
    createdAt?: Date | string
  }

  export type historyUncheckedCreateWithoutItemsInput = {
    id?: number
    reason?: string
    createdAt?: Date | string
  }

  export type historyCreateOrConnectWithoutItemsInput = {
    where: historyWhereUniqueInput
    create: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput>
  }

  export type historyCreateManyItemsInputEnvelope = {
    data: historyCreateManyItemsInput | historyCreateManyItemsInput[]
    skipDuplicates?: boolean
  }

  export type detail_itemsCreateWithoutItemsInput = {
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
    category: categoryCreateNestedOneWithoutDetail_itemsInput
  }

  export type detail_itemsUncheckedCreateWithoutItemsInput = {
    id?: number
    categoryId: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
  }

  export type detail_itemsCreateOrConnectWithoutItemsInput = {
    where: detail_itemsWhereUniqueInput
    create: XOR<detail_itemsCreateWithoutItemsInput, detail_itemsUncheckedCreateWithoutItemsInput>
  }

  export type userCreateWithoutItemsInput = {
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role?: user_role
    is_active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    nik: string
    phone: string
    address: string
    username: string
    email: string
    password: string
    role?: user_role
    is_active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userCreateOrConnectWithoutItemsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutItemsInput, userUncheckedCreateWithoutItemsInput>
  }

  export type historyUpsertWithWhereUniqueWithoutItemsInput = {
    where: historyWhereUniqueInput
    update: XOR<historyUpdateWithoutItemsInput, historyUncheckedUpdateWithoutItemsInput>
    create: XOR<historyCreateWithoutItemsInput, historyUncheckedCreateWithoutItemsInput>
  }

  export type historyUpdateWithWhereUniqueWithoutItemsInput = {
    where: historyWhereUniqueInput
    data: XOR<historyUpdateWithoutItemsInput, historyUncheckedUpdateWithoutItemsInput>
  }

  export type historyUpdateManyWithWhereWithoutItemsInput = {
    where: historyScalarWhereInput
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyWithoutItemsInput>
  }

  export type historyScalarWhereInput = {
    AND?: historyScalarWhereInput | historyScalarWhereInput[]
    OR?: historyScalarWhereInput[]
    NOT?: historyScalarWhereInput | historyScalarWhereInput[]
    id?: IntFilter<"history"> | number
    itemsId?: IntFilter<"history"> | number
    reason?: StringFilter<"history"> | string
    createdAt?: DateTimeFilter<"history"> | Date | string
  }

  export type detail_itemsUpsertWithoutItemsInput = {
    update: XOR<detail_itemsUpdateWithoutItemsInput, detail_itemsUncheckedUpdateWithoutItemsInput>
    create: XOR<detail_itemsCreateWithoutItemsInput, detail_itemsUncheckedCreateWithoutItemsInput>
    where?: detail_itemsWhereInput
  }

  export type detail_itemsUpdateToOneWithWhereWithoutItemsInput = {
    where?: detail_itemsWhereInput
    data: XOR<detail_itemsUpdateWithoutItemsInput, detail_itemsUncheckedUpdateWithoutItemsInput>
  }

  export type detail_itemsUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoryUpdateOneRequiredWithoutDetail_itemsNestedInput
  }

  export type detail_itemsUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUpsertWithoutItemsInput = {
    update: XOR<userUpdateWithoutItemsInput, userUncheckedUpdateWithoutItemsInput>
    create: XOR<userCreateWithoutItemsInput, userUncheckedCreateWithoutItemsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutItemsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutItemsInput, userUncheckedUpdateWithoutItemsInput>
  }

  export type userUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | user_role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsCreateWithoutUserInput = {
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyCreateNestedManyWithoutItemsInput
    detailItems: detail_itemsCreateNestedOneWithoutItemsInput
  }

  export type itemsUncheckedCreateWithoutUserInput = {
    id?: number
    detailId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: historyUncheckedCreateNestedManyWithoutItemsInput
  }

  export type itemsCreateOrConnectWithoutUserInput = {
    where: itemsWhereUniqueInput
    create: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput>
  }

  export type itemsCreateManyUserInputEnvelope = {
    data: itemsCreateManyUserInput | itemsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type itemsUpsertWithWhereUniqueWithoutUserInput = {
    where: itemsWhereUniqueInput
    update: XOR<itemsUpdateWithoutUserInput, itemsUncheckedUpdateWithoutUserInput>
    create: XOR<itemsCreateWithoutUserInput, itemsUncheckedCreateWithoutUserInput>
  }

  export type itemsUpdateWithWhereUniqueWithoutUserInput = {
    where: itemsWhereUniqueInput
    data: XOR<itemsUpdateWithoutUserInput, itemsUncheckedUpdateWithoutUserInput>
  }

  export type itemsUpdateManyWithWhereWithoutUserInput = {
    where: itemsScalarWhereInput
    data: XOR<itemsUpdateManyMutationInput, itemsUncheckedUpdateManyWithoutUserInput>
  }

  export type detail_itemsCreateManyCategoryInput = {
    id?: number
    name: string
    quantity: number
    description: string
    url: string
    price: number
    total: number
    duedate: Date | string
  }

  export type detail_itemsUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUpdateManyWithoutDetailItemsNestedInput
  }

  export type detail_itemsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: itemsUncheckedUpdateManyWithoutDetailItemsNestedInput
  }

  export type detail_itemsUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsCreateManyDetailItemsInput = {
    id?: number
    userId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type itemsUpdateWithoutDetailItemsInput = {
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUpdateManyWithoutItemsNestedInput
    user?: userUpdateOneRequiredWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateWithoutDetailItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateManyWithoutDetailItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type historyCreateManyItemsInput = {
    id?: number
    reason?: string
    createdAt?: Date | string
  }

  export type historyUpdateWithoutItemsInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type historyUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type historyUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type itemsCreateManyUserInput = {
    id?: number
    detailId: number
    status?: items_status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type itemsUpdateWithoutUserInput = {
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUpdateManyWithoutItemsNestedInput
    detailItems?: detail_itemsUpdateOneRequiredWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    detailId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: historyUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type itemsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    detailId?: IntFieldUpdateOperationsInput | number
    status?: Enumitems_statusFieldUpdateOperationsInput | items_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}